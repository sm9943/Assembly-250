


ARM Macro Assembler    Page 1 Program Iteration and Subroutines Lab 4


    1 00000000                 TTL              Program Iteration and Subroutines Lab 4
    2 00000000         ;****************************************************************
    3 00000000         ; Iteration and Subroutines, Lab 4
    4 00000000         ;Name:  Shubhang Mehrotra
    5 00000000         ;Date:  02/18/2021
    6 00000000         ;Class:  CMPE-250
    7 00000000         ;Section:  Section 1 Thursday 2 PM
    8 00000000         ;---------------------------------------------------------------
    9 00000000         ;Keil Simulator Template for KL05
   10 00000000         ;R. W. Melton
   11 00000000         ;January 21, 2021
   12 00000000         ;****************************************************************
   13 00000000         ;Assembler directives
   14 00000000                 THUMB
   16 00000000         ;****************************************************************
   17 00000000         ;EQUates
   18 00000000 00000019 
                       MAX_DATA
                               EQU              25
   19 00000000         ;Standard data masks
   20 00000000 000000FF 
                       BYTE_MASK
                               EQU              0xFF
   21 00000000 0000000F 
                       NIBBLE_MASK
                               EQU              0x0F
   22 00000000         ;Standard data sizes (in bits)
   23 00000000 00000008 
                       BYTE_BITS
                               EQU              8
   24 00000000 00000004 
                       NIBBLE_BITS
                               EQU              4
   25 00000000         ;Architecture data sizes (in bytes)
   26 00000000 00000004 
                       WORD_SIZE
                               EQU              4           ;Cortex-M0+
   27 00000000 00000002 
                       HALFWORD_SIZE
                               EQU              2           ;Cortex-M0+
   28 00000000         ;Architecture data masks
   29 00000000 0000FFFF 



ARM Macro Assembler    Page 2 Program Iteration and Subroutines Lab 4


                       HALFWORD_MASK
                               EQU              0xFFFF
   30 00000000         ;Return                 
   31 00000000 00000001 
                       RET_ADDR_T_MASK
                               EQU              1           ;Bit 0 of ret. addr. must be
   32 00000000         ;set for BX, BLX, or POP
   33 00000000         ;mask in thumb mode
   34 00000000         ;---------------------------------------------------------------
   35 00000000         ;Vectors
   36 00000000 000000C0 
                       VECTOR_TABLE_SIZE
                               EQU              0x000000C0  ;KL05
   37 00000000 00000004 
                       VECTOR_SIZE
                               EQU              4           ;Bytes per vector
   38 00000000         ;---------------------------------------------------------------
   39 00000000         ;CPU CONTROL:  Control register
   40 00000000         ;31-2:(reserved)
   41 00000000         ;   1:SPSEL=current stack pointer select
   42 00000000         ;           0=MSP (main stack pointer) (reset value)
   43 00000000         ;           1=PSP (process stack pointer)
   44 00000000         ;   0:nPRIV=not privileged
   45 00000000         ;        0=privileged (Freescale/NXP "supervisor") (reset value)
   46 00000000         ;        1=not privileged (Freescale/NXP "user")
   47 00000000 00000002 
                       CONTROL_SPSEL_MASK
                               EQU              2
   48 00000000 00000001 
                       CONTROL_SPSEL_SHIFT
                               EQU              1
   49 00000000 00000001 
                       CONTROL_nPRIV_MASK
                               EQU              1
   50 00000000 00000000 
                       CONTROL_nPRIV_SHIFT
                               EQU              0
   51 00000000         ;---------------------------------------------------------------
   52 00000000         ;CPU PRIMASK:  Interrupt mask register
   53 00000000         ;31-1:(reserved)
   54 00000000         ;   0:PM=prioritizable interrupt mask:
   55 00000000         ;        0=all interrupts unmasked (reset value)



ARM Macro Assembler    Page 3 Program Iteration and Subroutines Lab 4


   56 00000000         ;          (value after CPSIE I instruction)
   57 00000000         ;        1=prioritizable interrrupts masked
   58 00000000         ;          (value after CPSID I instruction)
   59 00000000 00000001 
                       PRIMASK_PM_MASK
                               EQU              1
   60 00000000 00000000 
                       PRIMASK_PM_SHIFT
                               EQU              0
   61 00000000         ;---------------------------------------------------------------
   62 00000000         ;CPU PSR:  Program status register
   63 00000000         ;Combined APSR, EPSR, and IPSR
   64 00000000         ;----------------------------------------------------------
   65 00000000         ;CPU APSR:  Application Program Status Register
   66 00000000         ;31  :N=negative flag
   67 00000000         ;30  :Z=zero flag
   68 00000000         ;29  :C=carry flag
   69 00000000         ;28  :V=overflow flag
   70 00000000         ;27-0:(reserved)
   71 00000000 F0000000 
                       APSR_MASK
                               EQU              0xF0000000
   72 00000000 0000001C 
                       APSR_SHIFT
                               EQU              28
   73 00000000 80000000 
                       APSR_N_MASK
                               EQU              0x80000000
   74 00000000 0000001F 
                       APSR_N_SHIFT
                               EQU              31
   75 00000000 40000000 
                       APSR_Z_MASK
                               EQU              0x40000000
   76 00000000 0000001E 
                       APSR_Z_SHIFT
                               EQU              30
   77 00000000 20000000 
                       APSR_C_MASK
                               EQU              0x20000000
   78 00000000 0000001D 
                       APSR_C_SHIFT



ARM Macro Assembler    Page 4 Program Iteration and Subroutines Lab 4


                               EQU              29
   79 00000000 10000000 
                       APSR_V_MASK
                               EQU              0x10000000
   80 00000000 0000001C 
                       APSR_V_SHIFT
                               EQU              28
   81 00000000         ;----------------------------------------------------------
   82 00000000         ;CPU EPSR
   83 00000000         ;31-25:(reserved)
   84 00000000         ;   24:T=Thumb state bit
   85 00000000         ;23- 0:(reserved)
   86 00000000 01000000 
                       EPSR_MASK
                               EQU              0x01000000
   87 00000000 00000018 
                       EPSR_SHIFT
                               EQU              24
   88 00000000 01000000 
                       EPSR_T_MASK
                               EQU              0x01000000
   89 00000000 00000018 
                       EPSR_T_SHIFT
                               EQU              24
   90 00000000         ;----------------------------------------------------------
   91 00000000         ;CPU IPSR
   92 00000000         ;31-6:(reserved)
   93 00000000         ; 5-0:Exception number=number of current exception
   94 00000000         ;      0=thread mode
   95 00000000         ;      1:(reserved)
   96 00000000         ;      2=NMI
   97 00000000         ;      3=hard fault
   98 00000000         ;      4-10:(reserved)
   99 00000000         ;     11=SVCall
  100 00000000         ;     12-13:(reserved)
  101 00000000         ;     14=PendSV
  102 00000000         ;     15=SysTick
  103 00000000         ;     16=IRQ0
  104 00000000         ;     16-47:IRQ(Exception number - 16)
  105 00000000         ;     47=IRQ31
  106 00000000         ;     48-63:(reserved)
  107 00000000 0000003F 



ARM Macro Assembler    Page 5 Program Iteration and Subroutines Lab 4


                       IPSR_MASK
                               EQU              0x0000003F
  108 00000000 00000000 
                       IPSR_SHIFT
                               EQU              0
  109 00000000 0000003F 
                       IPSR_EXCEPTION_MASK
                               EQU              0x0000003F
  110 00000000 00000000 
                       IPSR_EXCEPTION_SHIFT
                               EQU              0
  111 00000000         ;----------------------------------------------------------
  112 00000000 80000000 
                       PSR_N_MASK
                               EQU              APSR_N_MASK
  113 00000000 0000001F 
                       PSR_N_SHIFT
                               EQU              APSR_N_SHIFT
  114 00000000 40000000 
                       PSR_Z_MASK
                               EQU              APSR_Z_MASK
  115 00000000 0000001E 
                       PSR_Z_SHIFT
                               EQU              APSR_Z_SHIFT
  116 00000000 20000000 
                       PSR_C_MASK
                               EQU              APSR_C_MASK
  117 00000000 0000001D 
                       PSR_C_SHIFT
                               EQU              APSR_C_SHIFT
  118 00000000 10000000 
                       PSR_V_MASK
                               EQU              APSR_V_MASK
  119 00000000 0000001C 
                       PSR_V_SHIFT
                               EQU              APSR_V_SHIFT
  120 00000000 01000000 
                       PSR_T_MASK
                               EQU              EPSR_T_MASK
  121 00000000 00000018 
                       PSR_T_SHIFT
                               EQU              EPSR_T_SHIFT



ARM Macro Assembler    Page 6 Program Iteration and Subroutines Lab 4


  122 00000000 0000003F 
                       PSR_EXCEPTION_MASK
                               EQU              IPSR_EXCEPTION_MASK
  123 00000000 00000000 
                       PSR_EXCEPTION_SHIFT
                               EQU              IPSR_EXCEPTION_SHIFT
  124 00000000         ;----------------------------------------------------------
  125 00000000         ;Stack
  126 00000000 00000100 
                       SSTACK_SIZE
                               EQU              0x00000100
  127 00000000         ;****************************************************************
  128 00000000         ;Program
  129 00000000         ;Linker requires Reset_Handler
  130 00000000                 AREA             MyCode,CODE,READONLY
  131 00000000                 ENTRY
  132 00000000                 IMPORT           InitData
  133 00000000                 IMPORT           LoadData
  134 00000000                 IMPORT           TestData
  135 00000000         
  136 00000000                 EXPORT           Reset_Handler
  137 00000000                 EXPORT           P
  138 00000000                 EXPORT           Q
  139 00000000                 EXPORT           Results
  140 00000000         
  141 00000000         Reset_Handler
                               PROC             {}
  142 00000000         main
  143 00000000         ;---------------------------------------------------------------
  144 00000000         ;Initialize registers R0-R12
  145 00000000 F7FF FFFE       BL               RegInit
  146 00000004         
  147 00000004         ;>>>>> begin main program code <<<<<
  148 00000004         ; Inputs:
  149 00000004         ; R0: Divisor (unsigned)
  150 00000004         ; R1: Dividend (unsigned)
  151 00000004         ; 
  152 00000004         ; Outputs: 
  153 00000004         ; R0: Quotient (unsigned)
  154 00000004         ; R1: Remainder (unsigned)
  155 00000004         ;  C: ASPR Flag, 0 for Valid Result, 1 for invalid. 
  156 00000004         ;



ARM Macro Assembler    Page 7 Program Iteration and Subroutines Lab 4


  157 00000004         ; Constraints: 
  158 00000004         ; R6 and R7 must not be modified: Testing 
  159 00000004         
  160 00000004 F7FF FFFE       BL               InitData    ; Initializing Data
  161 00000008         
  162 00000008 4A24            LDR              R2,=P       ; Loading the Address of P
  163 0000000A 4B25            LDR              R3,=Q       ; Loading the address of Q
  164 0000000C         
  165 0000000C F7FF FFFE 
                       WHILE   BL               LoadData    ; Loading Data
  166 00000010 D20B            BCS              DONE        ; Loop Check -> If 'C' flag is set, end loop. 
  167 00000012         
  168 00000012 6811            LDR              R1,[R2,#0]  ; Load value of P into R1
  169 00000014 6818            LDR              R0,[R3,#0]  ; Load value of Q into R0
  170 00000016 F7FF FFFE       BL               DIVU        ; Call Unsigned integer Division subroutine
  171 0000001A         
  172 0000001A D301            BCC              IS_VALID    ; If C is set -> invalid result,
  173 0000001C         ; Otherwise valid -> Continue.
  174 0000001C         
  175 0000001C 4821            LDR              R0,=0xFFFFFFFF ; If C flag is set, set values into R0 
  176 0000001E 4921            LDR              R1,=0xFFFFFFFF ; and R1. 
  177 00000020         
  178 00000020         ; If everything is valid. 
  179 00000020 6010    IS_VALID
                               STR              R0,[R2,#0]  ; Store the value of P into R0 -> Quotient  
  180 00000022 6019            STR              R1,[R3,#0]  ; Store the value of Q into R1 -> Remainder
  181 00000024 F7FF FFFE       BL               TestData    ; Branch to TestData subroutine in the Lib file
  182 00000028 E7F0            B                WHILE       ; Loop call. 
  183 0000002A         
  184 0000002A         DONE
  185 0000002A         
  186 0000002A         ;>>>>>   end main program code <<<<<
  187 0000002A         ;Stay here
  188 0000002A E7FE            B                .
  189 0000002C                 ENDP
  190 0000002C         ;---------------------------------------------------------------
  191 0000002C         RegInit PROC             {}
  192 0000002C         ;****************************************************************
  193 0000002C         ;Initializes register n to value 0xnnnnnnnn, for n in 
  194 0000002C         ;{0x0-0xC,0xE}
  195 0000002C         ;****************************************************************
  196 0000002C         ;Put return on stack



ARM Macro Assembler    Page 8 Program Iteration and Subroutines Lab 4


  197 0000002C B500            PUSH             {LR}
  198 0000002E         ;Initialize registers
  199 0000002E 491E            LDR              R1,=0x11111111
  200 00000030 184A            ADDS             R2,R1,R1
  201 00000032 1853            ADDS             R3,R2,R1
  202 00000034 185C            ADDS             R4,R3,R1
  203 00000036 1865            ADDS             R5,R4,R1
  204 00000038 186E            ADDS             R6,R5,R1
  205 0000003A 1877            ADDS             R7,R6,R1
  206 0000003C 1878            ADDS             R0,R7,R1
  207 0000003E 4680            MOV              R8,R0
  208 00000040 1840            ADDS             R0,R0,R1
  209 00000042 4681            MOV              R9,R0
  210 00000044 1840            ADDS             R0,R0,R1
  211 00000046 4682            MOV              R10,R0
  212 00000048 1840            ADDS             R0,R0,R1
  213 0000004A 4683            MOV              R11,R0
  214 0000004C 1840            ADDS             R0,R0,R1
  215 0000004E 4684            MOV              R12,R0
  216 00000050 1840            ADDS             R0,R0,R1
  217 00000052 1840            ADDS             R0,R0,R1
  218 00000054 4686            MOV              R14,R0
  219 00000056 2000            MOVS             R0,#0
  220 00000058 BD00            POP              {PC}
  221 0000005A                 ENDP
  222 0000005A         ;---------------------------------------------------------------
  223 0000005A         ;>>>>> begin subroutine code <<<<<
  224 0000005A         DIVU    PROC             {R2-R14}
  225 0000005A         ;****************************************************************
  226 0000005A         ; Performs the division operation upon R1 by dividing it from R0
  227 0000005A         ; and returning the Quotient and Remainder in R0 and R1 
  228 0000005A         ; respectively. If Division by 0 is top be performed, R0 and R1 
  229 0000005A         ; do not change their values, instead C bit is set.
  230 0000005A         ;
  231 0000005A         ; R0 rem R1 = R1 / R0 
  232 0000005A         ;****************************************************************
  233 0000005A B40C            PUSH             {R2-R3}     ;Temporary Registers  
  234 0000005C 2800            CMP              R0, #0      ;Check for division by 0
  235 0000005E D014            BEQ              DIV_BY_0
  236 00000060 2900            CMP              R1, #0      ;Check for division of 0   
  237 00000062 D00F            BEQ              DIV_OF_0
  238 00000064         



ARM Macro Assembler    Page 9 Program Iteration and Subroutines Lab 4


  239 00000064 0002            MOVS             R2, R0      ;Temporarily storing the dividend
  240 00000066 2000            MOVS             R0, #0      ;Initializing the quotient
  241 00000068         
  242 00000068 4291    While   CMP              R1,R2       ;check for Dividend >= Divisor
  243 0000006A D302            BLO              DIV_END
  244 0000006C 1A89            SUBS             R1,R1,R2    ;Dividend -= Divisor
  245 0000006E 1C40            ADDS             R0,R0,#1    ;Quotient++
  246 00000070 E7FA            B                While
  247 00000072         
  248 00000072 F3EF 8200 
                       DIV_END MRS              R2, APSR    ;Clear flags.
  249 00000076 2320            MOVS             R3, #0x20   ;Create Mask
  250 00000078 061B            LSLS             R3,R3,#24   ;Shift to MSB
  251 0000007A 439A            BICS             R2,R3       ;
  252 0000007C F382 8800       MSR              APSR, R2
  253 00000080         
  254 00000080 BC0C    DIV_DONE
                               POP              {R2-R3}     ;Store Temporary Registers.
  255 00000082 4770            BX               LR
  256 00000084         
  257 00000084 2000    DIV_OF_0
                               MOVS             R0, #0      ;Set Quotient = 0
  258 00000086 2100            MOVS             R1, #0      ;Set Remainder = 0
  259 00000088 E7F3            B                DIV_END
  260 0000008A         
  261 0000008A F3EF 8200 
                       DIV_BY_0
                               MRS              R2, APSR    ;Clear all flags
  262 0000008E 2320            MOVS             R3, #0x20   ;Mask
  263 00000090 061B            LSLS             R3,R3,#24
  264 00000092 431A            ORRS             R2,R3
  265 00000094 F382 8800       MSR              APSR,R2     ;Set C Flag
  266 00000098 E7F2            B                DIV_DONE
  267 0000009A                 ENDP
  268 0000009A         ;>>>>>   end subroutine code <<<<<
  269 0000009A 00 00           ALIGN
  270 0000009C         ;****************************************************************
  271 0000009C         ;Vector Table Mapped to Address 0 at Reset
  272 0000009C         ;Linker requires __Vectors to be exported
  273 0000009C 00000000 
              00000000 
              FFFFFFFF 



ARM Macro Assembler    Page 10 Program Iteration and Subroutines Lab 4


              11111111         AREA             RESET, DATA, READONLY
  274 00000000                 EXPORT           __Vectors
  275 00000000                 EXPORT           __Vectors_End
  276 00000000                 EXPORT           __Vectors_Size
  277 00000000         __Vectors
  278 00000000         ;ARM core vectors
  279 00000000 00000000        DCD              __initial_sp ;00:end of stack
  280 00000004 00000000        DCD              Reset_Handler ;reset vector
  281 00000008 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 11 Program Iteration and Subroutines Lab 4


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00               SPACE            (VECTOR_TABLE_SIZE - (2 * VECTOR_SIZE))
  282 000000C0         __Vectors_End
  283 000000C0 000000C0 
                       __Vectors_Size
                               EQU              __Vectors_End - __Vectors
  284 000000C0                 ALIGN
  285 000000C0         ;****************************************************************
  286 000000C0         ;Constants
  287 000000C0                 AREA             MyConst,DATA,READONLY
  288 00000000         ;>>>>> begin constants here <<<<<
  289 00000000         ;>>>>>   end constants here <<<<<
  290 00000000         ;****************************************************************
  291 00000000                 AREA             |.ARM.__at_0x1FFFFC00|,DATA,READWRITE,ALIGN=3
  292 00000000                 EXPORT           __initial_sp
  293 00000000         ;Allocate system stack



ARM Macro Assembler    Page 12 Program Iteration and Subroutines Lab 4


  294 00000000                 IF               :LNOT::DEF:SSTACK_SIZE
  296                          ENDIF
  297 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 13 Program Iteration and Subroutines Lab 4


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 14 Program Iteration and Subroutines Lab 4


              00 00 00 
              00 00 00 
              00 00 00 
              00       Stack_Mem
                               SPACE            SSTACK_SIZE
  298 00000100         __initial_sp
  299 00000100         ;****************************************************************
  300 00000100         ;Variables
  301 00000100                 AREA             MyData,DATA,READWRITE
  302 00000000         ;>>>>> begin variables here <<<<<
  303 00000000 00 00 00 
              00       P       SPACE            4
  304 00000004 00 00 00 
              00       Q       SPACE            4
  305 00000008         
  306 00000008         ;Results must be defined as a Word Array with 2 x MAX_DATA elements 
  307 00000008 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    Results SPACE            2*MAX_DATA
  308 0000003A         ;>>>>>   end variables here <<<<<
  309 0000003A                 END
Command Line: --debug --xref --length=49 --width=120 --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=interwork --depend=".\
objects\lab 4.d" -o".\objects\lab 4.o" -IC:\Users\shubh\AppData\Local\Arm\Packs\Keil\Kinetis_KLxx_DFP\1.14.0\Device\Incl
ude -IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 533" --predefine="MKL
05Z32xxx4 SETA 1" --list=.\listings\lab 4.lst "Lab 4.s"



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DIVU 0000005A

Symbol: DIVU
   Definitions
      At line 224 in file Lab
   Uses
      At line 170 in file Lab
Comment: DIVU used once
DIV_BY_0 0000008A

Symbol: DIV_BY_0
   Definitions
      At line 261 in file Lab
   Uses
      At line 235 in file Lab
Comment: DIV_BY_0 used once
DIV_DONE 00000080

Symbol: DIV_DONE
   Definitions
      At line 254 in file Lab
   Uses
      At line 266 in file Lab
Comment: DIV_DONE used once
DIV_END 00000072

Symbol: DIV_END
   Definitions
      At line 248 in file Lab
   Uses
      At line 243 in file Lab
      At line 259 in file Lab

DIV_OF_0 00000084

Symbol: DIV_OF_0
   Definitions
      At line 257 in file Lab
   Uses
      At line 237 in file Lab
Comment: DIV_OF_0 used once
DONE 0000002A



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: DONE
   Definitions
      At line 184 in file Lab
   Uses
      At line 166 in file Lab
Comment: DONE used once
IS_VALID 00000020

Symbol: IS_VALID
   Definitions
      At line 179 in file Lab
   Uses
      At line 172 in file Lab
Comment: IS_VALID used once
MyCode 00000000

Symbol: MyCode
   Definitions
      At line 130 in file Lab
   Uses
      None
Comment: MyCode unused
RegInit 0000002C

Symbol: RegInit
   Definitions
      At line 191 in file Lab
   Uses
      At line 145 in file Lab
Comment: RegInit used once
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 141 in file Lab
   Uses
      At line 136 in file Lab
      At line 280 in file Lab

WHILE 0000000C




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: WHILE
   Definitions
      At line 165 in file Lab
   Uses
      At line 182 in file Lab
Comment: WHILE used once
While 00000068

Symbol: While
   Definitions
      At line 242 in file Lab
   Uses
      At line 246 in file Lab
Comment: While used once
main 00000000

Symbol: main
   Definitions
      At line 142 in file Lab
   Uses
      None
Comment: main unused
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 273 in file Lab
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 277 in file Lab
   Uses
      At line 274 in file Lab
      At line 283 in file Lab

__Vectors_End 000000C0

Symbol: __Vectors_End
   Definitions
      At line 282 in file Lab
   Uses
      At line 275 in file Lab
      At line 283 in file Lab

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MyConst 00000000

Symbol: MyConst
   Definitions
      At line 287 in file Lab
   Uses
      None
Comment: MyConst unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.ARM.__at_0x1FFFFC00 00000000

Symbol: .ARM.__at_0x1FFFFC00
   Definitions
      At line 291 in file Lab
   Uses
      None
Comment: .ARM.__at_0x1FFFFC00 unused
Stack_Mem 00000000

Symbol: Stack_Mem
   Definitions
      At line 297 in file Lab
   Uses
      None
Comment: Stack_Mem unused
__initial_sp 00000100

Symbol: __initial_sp
   Definitions
      At line 298 in file Lab
   Uses
      At line 279 in file Lab
      At line 292 in file Lab

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MyData 00000000

Symbol: MyData
   Definitions
      At line 301 in file Lab
   Uses
      None
Comment: MyData unused
P 00000000

Symbol: P
   Definitions
      At line 303 in file Lab
   Uses
      At line 137 in file Lab
      At line 162 in file Lab

Q 00000004

Symbol: Q
   Definitions
      At line 304 in file Lab
   Uses
      At line 138 in file Lab
      At line 163 in file Lab

Results 00000008

Symbol: Results
   Definitions
      At line 307 in file Lab
   Uses
      At line 139 in file Lab
Comment: Results used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

APSR_C_MASK 20000000

Symbol: APSR_C_MASK
   Definitions
      At line 77 in file Lab
   Uses
      At line 116 in file Lab
Comment: APSR_C_MASK used once
APSR_C_SHIFT 0000001D

Symbol: APSR_C_SHIFT
   Definitions
      At line 78 in file Lab
   Uses
      At line 117 in file Lab
Comment: APSR_C_SHIFT used once
APSR_MASK F0000000

Symbol: APSR_MASK
   Definitions
      At line 71 in file Lab
   Uses
      None
Comment: APSR_MASK unused
APSR_N_MASK 80000000

Symbol: APSR_N_MASK
   Definitions
      At line 73 in file Lab
   Uses
      At line 112 in file Lab
Comment: APSR_N_MASK used once
APSR_N_SHIFT 0000001F

Symbol: APSR_N_SHIFT
   Definitions
      At line 74 in file Lab
   Uses
      At line 113 in file Lab
Comment: APSR_N_SHIFT used once
APSR_SHIFT 0000001C




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: APSR_SHIFT
   Definitions
      At line 72 in file Lab
   Uses
      None
Comment: APSR_SHIFT unused
APSR_V_MASK 10000000

Symbol: APSR_V_MASK
   Definitions
      At line 79 in file Lab
   Uses
      At line 118 in file Lab
Comment: APSR_V_MASK used once
APSR_V_SHIFT 0000001C

Symbol: APSR_V_SHIFT
   Definitions
      At line 80 in file Lab
   Uses
      At line 119 in file Lab
Comment: APSR_V_SHIFT used once
APSR_Z_MASK 40000000

Symbol: APSR_Z_MASK
   Definitions
      At line 75 in file Lab
   Uses
      At line 114 in file Lab
Comment: APSR_Z_MASK used once
APSR_Z_SHIFT 0000001E

Symbol: APSR_Z_SHIFT
   Definitions
      At line 76 in file Lab
   Uses
      At line 115 in file Lab
Comment: APSR_Z_SHIFT used once
BYTE_BITS 00000008

Symbol: BYTE_BITS
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 23 in file Lab
   Uses
      None
Comment: BYTE_BITS unused
BYTE_MASK 000000FF

Symbol: BYTE_MASK
   Definitions
      At line 20 in file Lab
   Uses
      None
Comment: BYTE_MASK unused
CONTROL_SPSEL_MASK 00000002

Symbol: CONTROL_SPSEL_MASK
   Definitions
      At line 47 in file Lab
   Uses
      None
Comment: CONTROL_SPSEL_MASK unused
CONTROL_SPSEL_SHIFT 00000001

Symbol: CONTROL_SPSEL_SHIFT
   Definitions
      At line 48 in file Lab
   Uses
      None
Comment: CONTROL_SPSEL_SHIFT unused
CONTROL_nPRIV_MASK 00000001

Symbol: CONTROL_nPRIV_MASK
   Definitions
      At line 49 in file Lab
   Uses
      None
Comment: CONTROL_nPRIV_MASK unused
CONTROL_nPRIV_SHIFT 00000000

Symbol: CONTROL_nPRIV_SHIFT
   Definitions
      At line 50 in file Lab
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

      None
Comment: CONTROL_nPRIV_SHIFT unused
EPSR_MASK 01000000

Symbol: EPSR_MASK
   Definitions
      At line 86 in file Lab
   Uses
      None
Comment: EPSR_MASK unused
EPSR_SHIFT 00000018

Symbol: EPSR_SHIFT
   Definitions
      At line 87 in file Lab
   Uses
      None
Comment: EPSR_SHIFT unused
EPSR_T_MASK 01000000

Symbol: EPSR_T_MASK
   Definitions
      At line 88 in file Lab
   Uses
      At line 120 in file Lab
Comment: EPSR_T_MASK used once
EPSR_T_SHIFT 00000018

Symbol: EPSR_T_SHIFT
   Definitions
      At line 89 in file Lab
   Uses
      At line 121 in file Lab
Comment: EPSR_T_SHIFT used once
HALFWORD_MASK 0000FFFF

Symbol: HALFWORD_MASK
   Definitions
      At line 29 in file Lab
   Uses
      None
Comment: HALFWORD_MASK unused



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

HALFWORD_SIZE 00000002

Symbol: HALFWORD_SIZE
   Definitions
      At line 27 in file Lab
   Uses
      None
Comment: HALFWORD_SIZE unused
IPSR_EXCEPTION_MASK 0000003F

Symbol: IPSR_EXCEPTION_MASK
   Definitions
      At line 109 in file Lab
   Uses
      At line 122 in file Lab
Comment: IPSR_EXCEPTION_MASK used once
IPSR_EXCEPTION_SHIFT 00000000

Symbol: IPSR_EXCEPTION_SHIFT
   Definitions
      At line 110 in file Lab
   Uses
      At line 123 in file Lab
Comment: IPSR_EXCEPTION_SHIFT used once
IPSR_MASK 0000003F

Symbol: IPSR_MASK
   Definitions
      At line 107 in file Lab
   Uses
      None
Comment: IPSR_MASK unused
IPSR_SHIFT 00000000

Symbol: IPSR_SHIFT
   Definitions
      At line 108 in file Lab
   Uses
      None
Comment: IPSR_SHIFT unused
MAX_DATA 00000019




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

Symbol: MAX_DATA
   Definitions
      At line 18 in file Lab
   Uses
      At line 307 in file Lab
Comment: MAX_DATA used once
NIBBLE_BITS 00000004

Symbol: NIBBLE_BITS
   Definitions
      At line 24 in file Lab
   Uses
      None
Comment: NIBBLE_BITS unused
NIBBLE_MASK 0000000F

Symbol: NIBBLE_MASK
   Definitions
      At line 21 in file Lab
   Uses
      None
Comment: NIBBLE_MASK unused
PRIMASK_PM_MASK 00000001

Symbol: PRIMASK_PM_MASK
   Definitions
      At line 59 in file Lab
   Uses
      None
Comment: PRIMASK_PM_MASK unused
PRIMASK_PM_SHIFT 00000000

Symbol: PRIMASK_PM_SHIFT
   Definitions
      At line 60 in file Lab
   Uses
      None
Comment: PRIMASK_PM_SHIFT unused
PSR_C_MASK 20000000

Symbol: PSR_C_MASK
   Definitions



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

      At line 116 in file Lab
   Uses
      None
Comment: PSR_C_MASK unused
PSR_C_SHIFT 0000001D

Symbol: PSR_C_SHIFT
   Definitions
      At line 117 in file Lab
   Uses
      None
Comment: PSR_C_SHIFT unused
PSR_EXCEPTION_MASK 0000003F

Symbol: PSR_EXCEPTION_MASK
   Definitions
      At line 122 in file Lab
   Uses
      None
Comment: PSR_EXCEPTION_MASK unused
PSR_EXCEPTION_SHIFT 00000000

Symbol: PSR_EXCEPTION_SHIFT
   Definitions
      At line 123 in file Lab
   Uses
      None
Comment: PSR_EXCEPTION_SHIFT unused
PSR_N_MASK 80000000

Symbol: PSR_N_MASK
   Definitions
      At line 112 in file Lab
   Uses
      None
Comment: PSR_N_MASK unused
PSR_N_SHIFT 0000001F

Symbol: PSR_N_SHIFT
   Definitions
      At line 113 in file Lab
   Uses



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Absolute symbols

      None
Comment: PSR_N_SHIFT unused
PSR_T_MASK 01000000

Symbol: PSR_T_MASK
   Definitions
      At line 120 in file Lab
   Uses
      None
Comment: PSR_T_MASK unused
PSR_T_SHIFT 00000018

Symbol: PSR_T_SHIFT
   Definitions
      At line 121 in file Lab
   Uses
      None
Comment: PSR_T_SHIFT unused
PSR_V_MASK 10000000

Symbol: PSR_V_MASK
   Definitions
      At line 118 in file Lab
   Uses
      None
Comment: PSR_V_MASK unused
PSR_V_SHIFT 0000001C

Symbol: PSR_V_SHIFT
   Definitions
      At line 119 in file Lab
   Uses
      None
Comment: PSR_V_SHIFT unused
PSR_Z_MASK 40000000

Symbol: PSR_Z_MASK
   Definitions
      At line 114 in file Lab
   Uses
      None
Comment: PSR_Z_MASK unused



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Absolute symbols

PSR_Z_SHIFT 0000001E

Symbol: PSR_Z_SHIFT
   Definitions
      At line 115 in file Lab
   Uses
      None
Comment: PSR_Z_SHIFT unused
RET_ADDR_T_MASK 00000001

Symbol: RET_ADDR_T_MASK
   Definitions
      At line 31 in file Lab
   Uses
      None
Comment: RET_ADDR_T_MASK unused
SSTACK_SIZE 00000100

Symbol: SSTACK_SIZE
   Definitions
      At line 126 in file Lab
   Uses
      At line 297 in file Lab
Comment: SSTACK_SIZE used once
VECTOR_SIZE 00000004

Symbol: VECTOR_SIZE
   Definitions
      At line 37 in file Lab
   Uses
      At line 281 in file Lab
Comment: VECTOR_SIZE used once
VECTOR_TABLE_SIZE 000000C0

Symbol: VECTOR_TABLE_SIZE
   Definitions
      At line 36 in file Lab
   Uses
      At line 281 in file Lab
Comment: VECTOR_TABLE_SIZE used once
WORD_SIZE 00000004




ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Absolute symbols

Symbol: WORD_SIZE
   Definitions
      At line 26 in file Lab
   Uses
      None
Comment: WORD_SIZE unused
__Vectors_Size 000000C0

Symbol: __Vectors_Size
   Definitions
      At line 283 in file Lab
   Uses
      At line 276 in file Lab
Comment: __Vectors_Size used once
49 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

InitData 00000000

Symbol: InitData
   Definitions
      At line 132 in file Lab
   Uses
      At line 160 in file Lab
Comment: InitData used once
LoadData 00000000

Symbol: LoadData
   Definitions
      At line 133 in file Lab
   Uses
      At line 165 in file Lab
Comment: LoadData used once
TestData 00000000

Symbol: TestData
   Definitions
      At line 134 in file Lab
   Uses
      At line 181 in file Lab
Comment: TestData used once
3 symbols
411 symbols in table
