


ARM Macro Assembler    Page 1 Exercise 11 PWM and LEDs


    1 00000000                 TTL              Exercise 11 PWM and LEDs
    2 00000000         ;****************************************************************
    3 00000000         ;Assembly and C mixed programming to control the Red LED 
    4 00000000         ; on the KL05Z board.
    5 00000000         ;Name:  Shubhang Mehrotra
    6 00000000         ;Date:  04/15/2021
    7 00000000         ;Class:  CMPE-250
    8 00000000         ;Section:  01 Thursday 2 PM 
    9 00000000         ;---------------------------------------------------------------
   10 00000000         ;Keil Template for KL05
   11 00000000         ;R. W. Melton
   12 00000000         ;September 13, 2020
   13 00000000         ;****************************************************************
   14 00000000         ;Assembler directives
   15 00000000                 THUMB
   17 00000000         ;****************************************************************
   18 00000000         ;Include files
   19 00000000                 GET              MKL05Z4.s   ;Included by start.s
   21 00000000         ;****************************************************************
   22 00000000         ;EQUates
   23 00000000 0000003C 
                       PWM_FREQ
                               EQU              60
   24 00000000 02DC0000 
                       TPM_SOURCE_FREQ
                               EQU              47972352
   25 00000000 00000004 
                       TPM_SC_PS_VAL
                               EQU              4
   26 00000000 0000C333 
                       PWM_PERIOD
                               EQU              ((TPM_SOURCE_FREQ / (1 << TPM_SC_PS_VAL)) / PWM_FREQ)
   27 00000000 0000C332 
                       PWM_DUTY_MAX
                               EQU              (PWM_PERIOD-1) ;100% duty cycle
   28 00000000         
   29 00000000         ; Queue management record field offsets
   30 00000000 00000000 
                       IN_PTR  EQU              0
   31 00000000 00000004 
                       OUT_PTR EQU              4
   32 00000000 00000008 



ARM Macro Assembler    Page 2 Exercise 11 PWM and LEDs


                       BUF_STRT
                               EQU              8
   33 00000000 0000000C 
                       BUF_PAST
                               EQU              12
   34 00000000 00000010 
                       BUF_SIZE
                               EQU              16
   35 00000000 00000011 
                       NUM_ENQD
                               EQU              17
   36 00000000         
   37 00000000         ; Queue structure sizes
   38 00000000 00000050 
                       Q_BUF_SZ
                               EQU              80          ;Queue contents 
   39 00000000 00000012 
                       Q_REC_SZ
                               EQU              18          ;Queue management record
   40 00000000         
   41 00000000 000000FF 
                       PutNumUB_MASK
                               EQU              0xFF
   42 00000000 00000020 
                       C_MASK  EQU              0x20
   43 00000000 00000018 
                       C_SHIFT EQU              24
   44 00000000         
   45 00000000         
   46 00000000         ;from Lab 6
   47 00000000 0000004F 
                       MAX_STRING
                               EQU              79
   48 00000000         
   49 00000000         ;Characters
   50 00000000 0000000D 
                       CR      EQU              0x0D
   51 00000000 0000000A 
                       LF      EQU              0x0A
   52 00000000 00000008 
                       BS      EQU              0x08
   53 00000000 00000000 



ARM Macro Assembler    Page 3 Exercise 11 PWM and LEDs


                       NULL    EQU              0x00
   54 00000000         
   55 00000000         ;---------------------------------------------------------------
   56 00000000         ;NVIC_ICER
   57 00000000         ;31-00:CLRENA=masks for HW IRQ sources;
   58 00000000         ;             read:   0 = unmasked;   1 = masked
   59 00000000         ;             write:  0 = no effect;  1 = mask
   60 00000000         ;12:UART0 IRQ mask
   61 00000000 00001000 
                       NVIC_ICER_UART0_MASK
                               EQU              UART0_IRQ_MASK
   62 00000000         ;---------------------------------------------------------------
   63 00000000         ;NVIC_ICPR
   64 00000000         ;31-00:CLRPEND=pending status for HW IRQ sources;
   65 00000000         ;             read:   0 = not pending;  1 = pending
   66 00000000         ;             write:  0 = no effect;
   67 00000000         ;                     1 = change status to not pending
   68 00000000         ;12:UART0 IRQ pending status
   69 00000000 00001000 
                       NVIC_ICPR_UART0_MASK
                               EQU              UART0_IRQ_MASK
   70 00000000         ;---------------------------------------------------------------
   71 00000000         ;NVIC_IPR0-NVIC_IPR7
   72 00000000         ;2-bit priority:  00 = highest; 11 = lowest
   73 00000000 00000003 
                       UART0_IRQ_PRIORITY
                               EQU              3
   74 00000000 000000C0 
                       NVIC_IPR_UART0_MASK
                               EQU              (3 << UART0_PRI_POS)
   75 00000000 000000C0 
                       NVIC_IPR_UART0_PRI_3
                               EQU              (UART0_IRQ_PRIORITY << UART0_PRI_POS)
   76 00000000         ;---------------------------------------------------------------
   77 00000000         ;NVIC_ISER
   78 00000000         ;31-00:SETENA=masks for HW IRQ sources;
   79 00000000         ;             read:   0 = masked;     1 = unmasked
   80 00000000         ;             write:  0 = no effect;  1 = unmask
   81 00000000         ;12:UART0 IRQ mask
   82 00000000 00001000 
                       NVIC_ISER_UART0_MASK
                               EQU              UART0_IRQ_MASK



ARM Macro Assembler    Page 4 Exercise 11 PWM and LEDs


   83 00000000         ;---------------------------------------------------------------
   84 00000000         ;PORTx_PCRn (Port x pin control register n [for pin n])
   85 00000000         ;___->10-08:Pin mux control (select 0 to 8)
   86 00000000         ;Use provided PORT_PCR_MUX_SELECT_2_MASK
   87 00000000         ;---------------------------------------------------------------
   88 00000000         ;Port B
   90 00000000 01000200 
                       PORT_PCR_SET_PTB2_UART0_RX
                               EQU              (PORT_PCR_ISF_MASK :OR:                                    PORT_PCR_MUX
_SELECT_2_MASK)
   92 00000000 01000200 
                       PORT_PCR_SET_PTB1_UART0_TX
                               EQU              (PORT_PCR_ISF_MASK :OR:                                    PORT_PCR_MUX
_SELECT_2_MASK)
   93 00000000         ;---------------------------------------------------------------
   94 00000000         ;SIM_SCGC4
   95 00000000         ;1->10:UART0 clock gate control (enabled)
   96 00000000         ;Use provided SIM_SCGC4_UART0_MASK
   97 00000000         ;---------------------------------------------------------------
   98 00000000         ;SIM_SCGC5
   99 00000000         ;1->10:Port B clock gate control (enabled)
  100 00000000         ;Use provided SIM_SCGC5_PORTB_MASK
  101 00000000         ;---------------------------------------------------------------
  102 00000000         ;SIM_SOPT2
  103 00000000         ;01=27-26:UART0SRC=UART0 clock source select (MCGFLLCLK)
  104 00000000         ;---------------------------------------------------------------
  106 00000000 04000000 
                       SIM_SOPT2_UART0SRC_MCGFLLCLK
                               EQU              (1 << SIM_SOPT2_UART0SRC_SHIFT)
  107 00000000         ;---------------------------------------------------------------
  108 00000000         ;SIM_SOPT5
  109 00000000         ; 0->   16:UART0 open drain enable (disabled)
  110 00000000         ; 0->   02:UART0 receive data select (UART0_RX)
  111 00000000         ;00->01-00:UART0 transmit data select source (UART0_TX)
  115 00000000 00010005 
                       SIM_SOPT5_UART0_EXTERN_MASK_CLEAR
                               EQU              (SIM_SOPT5_UART0ODE_MASK :OR:                                  SIM_SOPT
5_UART0RXSRC_MASK :OR:                                  SIM_SOPT5_UART0TXSRC_MASK)
  116 00000000         ;---------------------------------------------------------------
  117 00000000         ;UART0_BDH
  118 00000000         ;    0->  7:LIN break detect IE (disabled)
  119 00000000         ;    0->  6:RxD input active edge IE (disabled)



ARM Macro Assembler    Page 5 Exercise 11 PWM and LEDs


  120 00000000         ;    0->  5:Stop bit number select (1)
  121 00000000         ;00001->4-0:SBR[12:0] (UART0CLK / [9600 * (OSR + 1)]) 
  122 00000000         ;UART0CLK is MCGFLLCLK
  123 00000000         ;MCGFLLCLK is 47972352 Hz ~=~ 48 MHz
  124 00000000         ;SBR ~=~ 48 MHz / (9600 * 16) = 312.5 --> 312 = 0x138
  125 00000000         ;SBR = 47972352 / (9600 * 16) = 312.32 --> 312 = 0x138
  126 00000000 00000001 
                       UART0_BDH_9600
                               EQU              0x01
  127 00000000         ;---------------------------------------------------------------
  128 00000000         ;UART0_BDL
  129 00000000         ;26->7-0:SBR[7:0] (UART0CLK / [9600 * (OSR + 1)])
  130 00000000         ;UART0CLK is MCGFLLCLK
  131 00000000         ;MCGFLLCLK is 47972352 Hz ~=~ 48 MHz
  132 00000000         ;SBR ~=~ 48 MHz / (9600 * 16) = 312.5 --> 312 = 0x138
  133 00000000         ;SBR = 47972352 / (9600 * 16) = 312.32 --> 312 = 0x138
  134 00000000 00000038 
                       UART0_BDL_9600
                               EQU              0x38
  135 00000000         ;---------------------------------------------------------------
  136 00000000         ;UART0_C1
  137 00000000         ;0-->7:LOOPS=loops select (normal)
  138 00000000         ;0-->6:DOZEEN=doze enable (disabled)
  139 00000000         ;0-->5:RSRC=receiver source select (internal--no effect LOOPS=0)
  140 00000000         ;0-->4:M=9- or 8-bit mode select 
  141 00000000         ;        (1 start, 8 data [lsb first], 1 stop)
  142 00000000         ;0-->3:WAKE=receiver wakeup method select (idle)
  143 00000000         ;0-->2:IDLE=idle line type select (idle begins after start bit)
  144 00000000         ;0-->1:PE=parity enable (disabled)
  145 00000000         ;0-->0:PT=parity type (even parity--no effect PE=0)
  146 00000000 00000000 
                       UART0_C1_8N1
                               EQU              0x00
  147 00000000         ;---------------------------------------------------------------
  148 00000000         ;UART0_C2
  149 00000000         ;0-->7:TIE=transmit IE for TDRE (disabled)
  150 00000000         ;0-->6:TCIE=transmission complete IE for TC (disabled)
  151 00000000         ;0-->5:RIE=receiver IE for RDRF (disabled)
  152 00000000         ;0-->4:ILIE=idle line IE for IDLE (disabled)
  153 00000000         ;1-->3:TE=transmitter enable (enabled)
  154 00000000         ;1-->2:RE=receiver enable (enabled)
  155 00000000         ;0-->1:RWU=receiver wakeup control (normal)



ARM Macro Assembler    Page 6 Exercise 11 PWM and LEDs


  156 00000000         ;0-->0:SBK=send break (disabled, normal)
  157 00000000 0000000C 
                       UART0_C2_T_R
                               EQU              (UART0_C2_TE_MASK :OR: UART0_C2_RE_MASK)
  158 00000000 0000002C 
                       UART0_C2_T_RI
                               EQU              (UART0_C2_RIE_MASK :OR: UART0_C2_T_R)
  159 00000000 000000AC 
                       UART0_C2_TI_RI
                               EQU              (UART0_C2_TIE_MASK :OR: UART0_C2_T_RI)
  160 00000000         ;---------------------------------------------------------------
  161 00000000         ;UART0_C3
  162 00000000         ;0-->7:R8T9=9th data bit for receiver (not used M=0)
  163 00000000         ;           10th data bit for transmitter (not used M10=0)
  164 00000000         ;0-->6:R9T8=9th data bit for transmitter (not used M=0)
  165 00000000         ;           10th data bit for receiver (not used M10=0)
  166 00000000         ;0-->5:TXDIR=UART_TX pin direction in single-wire mode
  167 00000000         ;            (no effect LOOPS=0)
  168 00000000         ;0-->4:TXINV=transmit data inversion (not inverted)
  169 00000000         ;0-->3:ORIE=overrun IE for OR (disabled)
  170 00000000         ;0-->2:NEIE=noise error IE for NF (disabled)
  171 00000000         ;0-->1:FEIE=framing error IE for FE (disabled)
  172 00000000         ;0-->0:PEIE=parity error IE for PF (disabled)
  173 00000000 00000000 
                       UART0_C3_NO_TXINV
                               EQU              0x00
  174 00000000         ;---------------------------------------------------------------
  175 00000000         ;UART0_C4
  176 00000000         ;    0-->  7:MAEN1=match address mode enable 1 (disabled)
  177 00000000         ;    0-->  6:MAEN2=match address mode enable 2 (disabled)
  178 00000000         ;    0-->  5:M10=10-bit mode select (not selected)
  179 00000000         ;01111-->4-0:OSR=over sampling ratio (16)
  180 00000000         ;               = 1 + OSR for 3 <= OSR <= 31
  181 00000000         ;               = 16 for 0 <= OSR <= 2 (invalid values)
  182 00000000 0000000F 
                       UART0_C4_OSR_16
                               EQU              0x0F
  183 00000000 0000000F 
                       UART0_C4_NO_MATCH_OSR_16
                               EQU              UART0_C4_OSR_16
  184 00000000         ;---------------------------------------------------------------
  185 00000000         ;UART0_C5



ARM Macro Assembler    Page 7 Exercise 11 PWM and LEDs


  186 00000000         ;  0-->  7:TDMAE=transmitter DMA enable (disabled)
  187 00000000         ;  0-->  6:Reserved; read-only; always 0
  188 00000000         ;  0-->  5:RDMAE=receiver full DMA enable (disabled)
  189 00000000         ;000-->4-2:Reserved; read-only; always 0
  190 00000000         ;  0-->  1:BOTHEDGE=both edge sampling (rising edge only)
  191 00000000         ;  0-->  0:RESYNCDIS=resynchronization disable (enabled)
  192 00000000 00000000 
                       UART0_C5_NO_DMA_SSR_SYNC
                               EQU              0x00
  193 00000000         ;---------------------------------------------------------------
  194 00000000         ;UART0_S1
  195 00000000         ;0-->7:TDRE=transmit data register empty flag; read-only
  196 00000000         ;0-->6:TC=transmission complete flag; read-only
  197 00000000         ;0-->5:RDRF=receive data register full flag; read-only
  198 00000000         ;1-->4:IDLE=idle line flag; write 1 to clear (clear)
  199 00000000         ;1-->3:OR=receiver overrun flag; write 1 to clear (clear)
  200 00000000         ;1-->2:NF=noise flag; write 1 to clear (clear)
  201 00000000         ;1-->1:FE=framing error flag; write 1 to clear (clear)
  202 00000000         ;1-->0:PF=parity error flag; write 1 to clear (clear)
  207 00000000 0000001F 
                       UART0_S1_CLEAR_FLAGS
                               EQU              (UART0_S1_IDLE_MASK :OR:                              UART0_S1_OR_MASK 
:OR:                              UART0_S1_NF_MASK :OR:                              UART0_S1_FE_MASK :OR:           
                   UART0_S1_PF_MASK)
  208 00000000         ;---------------------------------------------------------------
  209 00000000         ;UART0_S2
  210 00000000         ;1-->7:LBKDIF=LIN break detect interrupt flag (clear)
  211 00000000         ;             write 1 to clear
  212 00000000         ;1-->6:RXEDGIF=RxD pin active edge interrupt flag (clear)
  213 00000000         ;              write 1 to clear
  214 00000000         ;0-->5:(reserved); read-only; always 0
  215 00000000         ;0-->4:RXINV=receive data inversion (disabled)
  216 00000000         ;0-->3:RWUID=receive wake-up idle detect
  217 00000000         ;0-->2:BRK13=break character generation length (10)
  218 00000000         ;0-->1:LBKDE=LIN break detect enable (disabled)
  219 00000000         ;0-->0:RAF=receiver active flag; read-only
  221 00000000 000000C0 
                       UART0_S2_NO_RXINV_BRK10_NO_LBKDETECT_CLEAR_FLAGS
                               EQU              (UART0_S2_LBKDIF_MASK :OR: UART0_S2_RXEDGIF_MASK)
  222 00000000         ;---------------------------------------------------------------
  223 00000000         
  224 00000000         ;****************************************************************



ARM Macro Assembler    Page 8 Exercise 11 PWM and LEDs


  225 00000000         ;Program
  226 00000000         ;Linker requires Reset_Handler
  227 00000000                 AREA             MyCode,CODE,READONLY
  228 00000000         
  229 00000000                 EXPORT           PWM_duty_table_0
  230 00000000         ;EXPORT DAC0_table_0
  231 00000000         
  232 00000000                 EXPORT           GetStringSB
  233 00000000                 EXPORT           PutStringSB
  234 00000000                 EXPORT           GetChar
  235 00000000                 EXPORT           PutChar
  236 00000000                 EXPORT           PutNumHex
  237 00000000         
  238 00000000                 EXPORT           Init_UART0_IRQ
  239 00000000                 EXPORT           UART0_IRQHandler
  240 00000000         
  241 00000000         ;>>>>> begin subroutine code <<<<<
  242 00000000         ;-------------------------------------------
  243 00000000         UART0_IRQHandler
  244 00000000         UART0_ISR
                               PROC             {}
  245 00000000         ;Interrupt service routine for UART0
  246 00000000         ; Input 
  247 00000000         ;  -none- 
  248 00000000         ; Output
  249 00000000         ;  -none-
  250 00000000         ;Mask
  251 00000000 B672            CPSID            I
  252 00000002 B50F            PUSH             {LR, R0-R3}
  253 00000004         
  254 00000004 48B2            LDR              R0, =UART0_BASE
  255 00000006         
  256 00000006         ;check if tx interrupt is enabled
  257 00000006 78C1            LDRB             R1, [R0, #UART0_C2_OFFSET]
  258 00000008 2280            MOVS             R2, #0x80
  259 0000000A         
  260 0000000A 4011            ANDS             R1, R1, R2
  261 0000000C         
  262 0000000C 2900            CMP              R1, #0
  263 0000000E D100            BNE              TX_ENABLED
  264 00000010         
  265 00000010         ;If no TxInterrupt, check for Rx



ARM Macro Assembler    Page 9 Exercise 11 PWM and LEDs


  266 00000010 E00F            B                CHECK_RX_INT
  267 00000012         
  268 00000012         TX_ENABLED
  269 00000012         
  270 00000012 7901            LDRB             R1,[R0,#UART0_S1_OFFSET]
  271 00000014 2280            MOVS             R2, #0x80
  272 00000016         
  273 00000016 4011            ANDS             R1, R1, R2
  274 00000018 2900            CMP              R1, #0
  275 0000001A D00A            BEQ              CHECK_RX_INT
  276 0000001C         
  277 0000001C         ;Dequeue character
  278 0000001C         ;Load input params to initalize queue structure
  279 0000001C 49AD            LDR              R1, =TxQRecord
  280 0000001E 2250            MOVS             R2, #Q_BUF_SZ
  281 00000020         
  282 00000020 F7FF FFFE       BL               Dequeue
  283 00000024         
  284 00000024         ;Dequeue was unsuccessful
  285 00000024 D202            BCS              DISABLE_TX
  286 00000026         
  287 00000026         ;Dequeue was successful
  288 00000026 49AA            LDR              R1, =UART0_BASE
  289 00000028         
  290 00000028         ;Transmit Character Stored in R0
  291 00000028 71C8            STRB             R0, [R1, #UART0_D_OFFSET]
  292 0000002A         
  293 0000002A E00E            B                END_ISR
  294 0000002C         
  295 0000002C         DISABLE_TX
  296 0000002C         ;UART0 <- C2_T_RI
  297 0000002C 212C            MOVS             R1,#UART0_C2_T_RI
  298 0000002E 70C1            STRB             R1,[R0,#UART0_C2_OFFSET]
  299 00000030         
  300 00000030         ;Pop values and return
  301 00000030 E00B            B                END_ISR
  302 00000032         
  303 00000032         CHECK_RX_INT
  304 00000032 48A7            LDR              R0, =UART0_BASE
  305 00000034         
  306 00000034         ;Check if an RxInterrupt exists
  307 00000034 7901            LDRB             R1,[R0,#UART0_S1_OFFSET]



ARM Macro Assembler    Page 10 Exercise 11 PWM and LEDs


  308 00000036 2210            MOVS             R2, #0x10
  309 00000038         
  310 00000038 4011            ANDS             R1, R1, R2
  311 0000003A 2900            CMP              R1, #0
  312 0000003C D005            BEQ              END_ISR
  313 0000003E         
  314 0000003E         ;Receive character and store in R0
  315 0000003E 48A4            LDR              R0, =UART0_BASE
  316 00000040 79C3            LDRB             R3, [R0, #UART0_D_OFFSET]
  317 00000042         
  318 00000042         ;Enqueue character with character stored in R0
  319 00000042         ;Load input params to initalize queue structure
  320 00000042 49A5            LDR              R1, =RxQRecord
  321 00000044 0018            MOVS             R0, R3
  322 00000046         
  323 00000046 F7FF FFFE       BL               Enqueue
  324 0000004A         
  325 0000004A         ;No need to check return of EnQueue
  326 0000004A         ;character will be lost if the queue is full!
  327 0000004A         
  328 0000004A         END_ISR
  329 0000004A         
  330 0000004A         ;UnMask
  331 0000004A B662            CPSIE            I
  332 0000004C BD0F            POP              {PC, R0-R3}
  333 0000004E                 ENDP
  334 0000004E         ;**************************************
  335 0000004E         
  336 0000004E         InitQueue
                               PROC             {R0-R14}
  337 0000004E         ;InitQueue: Initalize Circular FIFO Queue Structure
  338 0000004E         ;Inputs:
  339 0000004E         ; R0 - Memory location of queue buffer
  340 0000004E         ; R1 - Address to place Queue record structure
  341 0000004E         ; R2 - Size of queue structure (character capacity)
  342 0000004E         ;Outputs:
  343 0000004E         ; none
  344 0000004E         ;--------------------------------------------
  345 0000004E B407            PUSH             {R0-R2}
  346 00000050         
  347 00000050         
  348 00000050         ;Store memory address of front of queue



ARM Macro Assembler    Page 11 Exercise 11 PWM and LEDs


  349 00000050         ;Into IN_PTR position of the buffer
  350 00000050 6008            STR              R0, [R1, #IN_PTR]
  351 00000052         
  352 00000052         ;Store same memory address for OUT_PTR
  353 00000052         ;position in the buffer since queue is empty
  354 00000052 6048            STR              R0, [R1, #OUT_PTR]
  355 00000054         
  356 00000054         ;Store same memory address in BUF_STRT for initalization
  357 00000054 6088            STR              R0, [R1, #BUF_STRT]
  358 00000056         
  359 00000056         ;Store BUF_PAST in last slot of buffer
  360 00000056 1880            ADDS             R0, R0, R2
  361 00000058 60C8            STR              R0, [R1, #BUF_PAST]
  362 0000005A         
  363 0000005A         ;Store BUF_SIZE with size in R2
  364 0000005A 740A            STRB             R2, [R1, #BUF_SIZE]
  365 0000005C         
  366 0000005C         ;Initalize NUM_ENQD to zero and 
  367 0000005C         ;store in 6th slot of buffer
  368 0000005C 2000            MOVS             R0, #0
  369 0000005E 7448            STRB             R0, [R1, #NUM_ENQD]
  370 00000060 BC07            POP              {R0-R2}
  371 00000062 4770            BX               LR
  372 00000064                 ENDP
  373 00000064         ;**************************************    
  374 00000064         
  375 00000064         Dequeue PROC             {R1-R14}
  376 00000064         ;Dequeue: Remove an element from the circular FIFO Queue
  377 00000064         ;Inputs:
  378 00000064         ; R1 - Address of Queue record structure
  379 00000064         ;Outputs:
  380 00000064         ; R0 - Character that has been dequeued
  381 00000064         ; PSR C flag : Failure - C = 1
  382 00000064         ;     Success - C = 0 
  383 00000064         ;--------------------------------------------
  384 00000064 B41E            PUSH             {R1-R4}
  385 00000066         
  386 00000066         ;If the number enqueued is 0, 
  387 00000066         ;Set failure PSR flag
  388 00000066 7C4B            LDRB             R3, [R1, #NUM_ENQD]
  389 00000068 2B00            CMP              R3, #0
  390 0000006A DD14            BLE              DEQUEUE_FAILURE



ARM Macro Assembler    Page 12 Exercise 11 PWM and LEDs


  391 0000006C         
  392 0000006C 684C            LDR              R4, [R1, #OUT_PTR]
  393 0000006E         
  394 0000006E         ;Remove the item from the queue
  395 0000006E         ;And place in R0
  396 0000006E 7820            LDRB             R0, [R4, #0]
  397 00000070         
  398 00000070         ;Decrement number of enqueued elements
  399 00000070         ;And store info back in buffer
  400 00000070 7C4B            LDRB             R3, [R1, #NUM_ENQD]
  401 00000072 1E5B            SUBS             R3, R3, #1
  402 00000074 744B            STRB             R3, [R1, #NUM_ENQD]
  403 00000076         
  404 00000076         
  405 00000076         ;Increment location of out_pointer
  406 00000076 1C64            ADDS             R4, R4, #1
  407 00000078         
  408 00000078         
  409 00000078         ;Compare OUT_PTR to BUF_PAST
  410 00000078         ;If out_ptr >= BUF_PAST, wrap the queue around
  411 00000078 68CB            LDR              R3, [R1, #BUF_PAST]
  412 0000007A 42A3            CMP              R3, R4
  413 0000007C D001            BEQ              WRAP_BUFFER
  414 0000007E         
  415 0000007E 604C            STR              R4, [R1, #OUT_PTR]
  416 00000080 E001            B                DEQUEUE_CLEAR_PSR
  417 00000082         
  418 00000082         WRAP_BUFFER
  419 00000082         ;Adjust out_ptr to equal buf_strt
  420 00000082         ;Thus wrapping around the circular queue
  421 00000082 688B            LDR              R3, [R1, #BUF_STRT]
  422 00000084 604B            STR              R3, [R1, #OUT_PTR]
  423 00000086         
  424 00000086         DEQUEUE_CLEAR_PSR
  425 00000086         ;Clear the PSR C flag
  426 00000086 F3EF 8100       MRS              R1, APSR
  427 0000008A 2320            MOVS             R3, #C_MASK
  428 0000008C 0609            LSLS             R1, R1, #C_SHIFT
  429 0000008E 4399            BICS             R1, R1, R3
  430 00000090 F381 8800       MSR              APSR, R1
  431 00000094         
  432 00000094         ;Successfully end the operation



ARM Macro Assembler    Page 13 Exercise 11 PWM and LEDs


  433 00000094 E006            B                END_DEQUEUE
  434 00000096         
  435 00000096         DEQUEUE_FAILURE
  436 00000096         ;Set PSR C flag to 1
  437 00000096 F3EF 8100       MRS              R1, APSR
  438 0000009A 2320            MOVS             R3, #C_MASK
  439 0000009C 061B            LSLS             R3, R3, #C_SHIFT
  440 0000009E 4319            ORRS             R1, R1, R3
  441 000000A0 F381 8800       MSR              APSR, R1
  442 000000A4         
  443 000000A4         END_DEQUEUE
  444 000000A4 BC1E            POP              {R1-R4}
  445 000000A6 4770            BX               LR
  446 000000A8                 ENDP
  447 000000A8         ;**************************************   
  448 000000A8         
  449 000000A8         Enqueue PROC             {R0-R14}
  450 000000A8         ;Enqueue: Add an element to the circular FIFO Queue
  451 000000A8         ;Inputs:
  452 000000A8         ;R0 - Character to enqueue
  453 000000A8         ;R1 - Address of the Queue record
  454 000000A8         ;Outputs:
  455 000000A8         ;PSR C flag (failure if C = 1, C = 0 otherwise.)
  456 000000A8         ;--------------------------------------------'
  457 000000A8         
  458 000000A8 B41C            PUSH             {R2, R3, R4}
  459 000000AA         
  460 000000AA         ;If num_enqd >= size of the queue
  461 000000AA         ;Then set PSR C flag to 1 indicating
  462 000000AA         ;the error that an element was not inserted
  463 000000AA         ;into a full queue
  464 000000AA         
  465 000000AA 7C4B            LDRB             R3, [R1, #NUM_ENQD]
  466 000000AC 7C0C            LDRB             R4, [R1, #BUF_SIZE]
  467 000000AE 42A3            CMP              R3, R4
  468 000000B0 DA00            BGE              QUEUE_FULL
  469 000000B2 E007            B                BEGIN_ENQUEUE
  470 000000B4         
  471 000000B4         QUEUE_FULL
  472 000000B4         ;Set PSR C flag to 1
  473 000000B4 F3EF 8100       MRS              R1, APSR
  474 000000B8 2320            MOVS             R3, #C_MASK



ARM Macro Assembler    Page 14 Exercise 11 PWM and LEDs


  475 000000BA 061B            LSLS             R3, R3, #C_SHIFT
  476 000000BC 4319            ORRS             R1, R1, R3
  477 000000BE F381 8800       MSR              APSR, R1
  478 000000C2 E01B            B                END_ENQUEUE
  479 000000C4         
  480 000000C4         BEGIN_ENQUEUE
  481 000000C4         
  482 000000C4         ;Load mem address of in_ptr
  483 000000C4         ;and then store the value to be enqueued
  484 000000C4         ;into the value at that memory address
  485 000000C4 680B            LDR              R3, [R1, #IN_PTR]
  486 000000C6 7018            STRB             R0, [R3, #0]
  487 000000C8         
  488 000000C8         ;Increment value of in_ptr by 1, 1 value past
  489 000000C8         ;The queue item. Then store back in IN_PTR
  490 000000C8         
  491 000000C8         ;check for end of buffer first,
  492 000000C8         
  493 000000C8 1C5B            ADDS             R3, R3, #1
  494 000000CA 600B            STR              R3, [R1, #IN_PTR]
  495 000000CC         
  496 000000CC         ;Increment number of enqueued elements
  497 000000CC 7C4B            LDRB             R3, [R1, #NUM_ENQD]
  498 000000CE 1C5B            ADDS             R3, R3, #1
  499 000000D0 744B            STRB             R3, [R1, #NUM_ENQD]
  500 000000D2         
  501 000000D2         ;If IN_PTR is >= BUF_PAST
  502 000000D2         ;Loop around and adjust inPtr to beginning of
  503 000000D2         ;the queue buffer
  504 000000D2 680B            LDR              R3, [R1, #IN_PTR]
  505 000000D4 68CC            LDR              R4, [R1, #BUF_PAST]
  506 000000D6         
  507 000000D6 42A3            CMP              R3, R4
  508 000000D8 DA07            BGE              WRAP_ENQUEUE
  509 000000DA         
  510 000000DA         ;Clear the PSR C flag confirming successful result
  511 000000DA F3EF 8200       MRS              R2, APSR
  512 000000DE 2320            MOVS             R3, #C_MASK
  513 000000E0 0612            LSLS             R2, R2, #C_SHIFT
  514 000000E2 439A            BICS             R2, R2, R3
  515 000000E4 F382 8800       MSR              APSR, R2
  516 000000E8         



ARM Macro Assembler    Page 15 Exercise 11 PWM and LEDs


  517 000000E8 E008            B                END_ENQUEUE
  518 000000EA         
  519 000000EA         WRAP_ENQUEUE
  520 000000EA         ;Adjust in_ptr to beginning of queue buffer
  521 000000EA 688A            LDR              R2, [R1, #BUF_STRT]
  522 000000EC 600A            STR              R2, [R1, #IN_PTR]
  523 000000EE         
  524 000000EE         ;Clear the PSR C flag confirming successful result
  525 000000EE F3EF 8200       MRS              R2, APSR
  526 000000F2 2320            MOVS             R3, #C_MASK
  527 000000F4 0612            LSLS             R2, R2, #C_SHIFT
  528 000000F6 439A            BICS             R2, R2, R3
  529 000000F8 F382 8800       MSR              APSR, R2
  530 000000FC         
  531 000000FC         END_ENQUEUE
  532 000000FC         
  533 000000FC BC1C            POP              {R2, R3, R4}
  534 000000FE 4770            BX               LR
  535 00000100                 ENDP
  536 00000100         ;**************************************      
  537 00000100         
  538 00000100         PutNumHex
                               PROC             {R0-R14}
  539 00000100         ;Print hex representation of a value.
  540 00000100         ;Inputs:
  541 00000100         ; R0 - Value to print to the screen
  542 00000100         ;Outputs:
  543 00000100         ; none
  544 00000100         ;--------------------------------------------
  545 00000100 B51C            PUSH             {R2-R4, LR}
  546 00000102         
  547 00000102 2220            MOVS             R2, #32
  548 00000104         
  549 00000104         HEX_PRINT_LOOP
  550 00000104         
  551 00000104         ;Iterate 8 times for each digit stored in a register
  552 00000104 2A00            CMP              R2, #0
  553 00000106 DB10            BLT              END_PRINT_HEX
  554 00000108         
  555 00000108         ;Shift current nibble to print to
  556 00000108         ;the rightmost value of register
  557 00000108 0003            MOVS             R3, R0



ARM Macro Assembler    Page 16 Exercise 11 PWM and LEDs


  558 0000010A 240F            MOVS             R4, #0x0F
  559 0000010C 40D3            LSRS             R3, R2
  560 0000010E         
  561 0000010E 401C            ANDS             R4, R4, R3
  562 00000110         
  563 00000110         ;Convert to appropriate ASCII value
  564 00000110 2C0A            CMP              R4, #10
  565 00000112 DA01            BGE              PRINT_LETTER
  566 00000114         
  567 00000114         ;If 0-9 should be printed, add ASCII '0' val
  568 00000114 3430            ADDS             R4, #'0'
  569 00000116 E000            B                PRINT_HX
  570 00000118         
  571 00000118         PRINT_LETTER
  572 00000118         
  573 00000118         ;If A-F should be printed, Add ASCII '55'
  574 00000118         ;To convert to capital letter value
  575 00000118 3437            ADDS             R4, R4, #55
  576 0000011A         
  577 0000011A         PRINT_HX
  578 0000011A         ;Print ASCII value to the screen
  579 0000011A         ;Make sure not to destroy vlue in R0!
  580 0000011A B401            PUSH             {R0}
  581 0000011C 0020            MOVS             R0, R4
  582 0000011E F7FF FFFE       BL               PutChar
  583 00000122 BC01            POP              {R0}
  584 00000124         
  585 00000124         ;Reset value in R3 and increment loop counter
  586 00000124 2400            MOVS             R4, #0
  587 00000126 1F12            SUBS             R2, R2, #4
  588 00000128 E7EC            B                HEX_PRINT_LOOP
  589 0000012A         
  590 0000012A         END_PRINT_HEX
  591 0000012A         
  592 0000012A BD1C            POP              {R2-R4, PC}
  593 0000012C                 ENDP
  594 0000012C         
  595 0000012C         ;**************************************      
  596 0000012C         
  597 0000012C         PutNumUB
                               PROC             {R0-R14}
  598 0000012C         ;Print binary representation of the 



ARM Macro Assembler    Page 17 Exercise 11 PWM and LEDs


  599 0000012C         ; unisgned byte value in R0
  600 0000012C         ;Inputs:
  601 0000012C         ; R0 - Value to print to the screen
  602 0000012C         ;Outputs:
  603 0000012C         ; none
  604 0000012C         ;--------------------------------------------  
  605 0000012C B401            PUSH             {R0}
  606 0000012E         
  607 0000012E 6800            LDR              R0,[R0,#0]
  608 00000130 21FF            MOVS             R1, #PutNumUB_MASK
  609 00000132 4008            ANDS             R0, R0, R1
  610 00000134 F7FF FFFE       BL               PutNumU
  611 00000138         
  612 00000138 BC01            POP              {R0}
  613 0000013A         
  614 0000013A                 ENDP
  615 0000013A         ;**************************************     
  616 0000013A         Init_UART0_IRQ
                               PROC             {R0-R14}
  617 0000013A         ; Initialize UART0 for Interrupt based 
  618 0000013A         ; Serial I/O.
  619 0000013A         ; Select/Configure UART0 Sources
  620 0000013A         ; Enable clocks for UART0 and Port B
  621 0000013A         ; Select port B mux pins to connect to UART0 
  622 0000013A         ; Configure UART0(register initialization)
  623 0000013A         
  624 0000013A         
  625 0000013A B507            PUSH             {R0-R2, LR} ;Register retention
  626 0000013C         
  627 0000013C         ;Initialize RxQBuffer
  628 0000013C 4966            LDR              R1, =RxQRecord
  629 0000013E 4867            LDR              R0, =RxQBuffer
  630 00000140 2250            MOVS             R2, #Q_BUF_SZ
  631 00000142 F7FF FFFE       BL               InitQueue
  632 00000146         
  633 00000146         ;Initialize TxQBuffer
  634 00000146 4963            LDR              R1, =TxQRecord
  635 00000148 4865            LDR              R0, =TxQBuffer
  636 0000014A 2250            MOVS             R2, #Q_BUF_SZ
  637 0000014C F7FF FFFE       BL               InitQueue
  638 00000150         
  639 00000150 4866            LDR              R0,=SIM_SOPT2 ;connect Sources



ARM Macro Assembler    Page 18 Exercise 11 PWM and LEDs


  640 00000152 4967            LDR              R1,=SIM_SOPT2_UART0SRC_MASK
  641 00000154 6802            LDR              R2,[R0,#0]  ;current SIM_SOPT2 value
  642 00000156 438A            BICS             R2,R2,R1    ;bits cleared of UART0SRC
  643 00000158 4966            LDR              R1,=SIM_SOPT2_UART0SRC_MCGFLLCLK
  644 0000015A 430A            ORRS             R2,R2,R1    ;UART0 bits changed
  645 0000015C 6002            STR              R2,[R0,#0]  ;update SIM_SOPT2
  646 0000015E         
  647 0000015E 4866            LDR              R0,=SIM_SOPT5 ;set SIM_SOPT5 for UART0 external
  648 00000160 4966            LDR              R1,=SIM_SOPT5_UART0_EXTERN_MASK_CLEAR
  649 00000162 6802            LDR              R2,[R0,#0]
  650 00000164 438A            BICS             R2,R2,R1
  651 00000166 6002            STR              R2,[R0,#0]
  652 00000168         
  653 00000168 4865            LDR              R0,=SIM_SCGC4 ;enable SIM_SCGC4 as clock for UART0 Module
  654 0000016A 4966            LDR              R1,=SIM_SCGC4_UART0_MASK
  655 0000016C 6802            LDR              R2,[R0,#0]
  656 0000016E 430A            ORRS             R2,R2,R1
  657 00000170 6002            STR              R2,[R0,#0]
  658 00000172         
  659 00000172 4865            LDR              R0,=SIM_SCGC5 ;enable clock for Port B module
  660 00000174 4963            LDR              R1,= SIM_SCGC5_PORTB_MASK
  661 00000176 6802            LDR              R2,[R0,#0]
  662 00000178 430A            ORRS             R2,R2,R1
  663 0000017A 6002            STR              R2,[R0,#0]
  664 0000017C         
  665 0000017C 4863            LDR              R0,=PORTB_PCR2 ;connect Port B pin 1 to UART0 Rx
  666 0000017E 4964            LDR              R1,=PORT_PCR_SET_PTB2_UART0_RX
  667 00000180 6001            STR              R1,[R0,#0]
  668 00000182         
  669 00000182 4864            LDR              R0,=PORTB_PCR1 ;connect Port B pin 2 to UART0 Tx
  670 00000184 4962            LDR              R1,=PORT_PCR_SET_PTB1_UART0_TX
  671 00000186 6001            STR              R1,[R0,#0]
  672 00000188         
  673 00000188         
  674 00000188 4851            LDR              R0,=UART0_BASE ;load base address
  675 0000018A         
  676 0000018A 210C            MOVS             R1,#UART0_C2_T_R ;Diasble UART0
  677 0000018C 78C2            LDRB             R2,[R0,#UART0_C2_OFFSET]
  678 0000018E 438A            BICS             R2,R2,R1
  679 00000190 70C2            STRB             R2,[R0,#UART0_C2_OFFSET]
  680 00000192         
  681 00000192         ;Init NVIC for UART0 Interrupts



ARM Macro Assembler    Page 19 Exercise 11 PWM and LEDs


  682 00000192         
  683 00000192         ;Set UART0 IRQ Priority
  684 00000192 4861            LDR              R0, =UART0_IPR
  685 00000194         
  686 00000194         ;TODO: Do I need this?
  687 00000194 4961            LDR              R1, =NVIC_IPR_UART0_MASK
  688 00000196         
  689 00000196 4A61            LDR              R2, =NVIC_IPR_UART0_PRI_3
  690 00000198         
  691 00000198 6803            LDR              R3, [R0, #0]
  692 0000019A         
  693 0000019A         ;TODO: Do I need this?
  694 0000019A 438B            BICS             R3, R3, R1
  695 0000019C         
  696 0000019C 4313            ORRS             R3, R3, R2
  697 0000019E         
  698 0000019E 6003            STR              R3, [R0, #0]
  699 000001A0         
  700 000001A0         ;Clear any pending UART0 Interrupts
  701 000001A0 485F            LDR              R0, =NVIC_ICPR
  702 000001A2 4960            LDR              R1, =NVIC_ICPR_UART0_MASK
  703 000001A4 6001            STR              R1, [R0, #0]
  704 000001A6         
  705 000001A6         ;Unmask UART0 interrupts
  706 000001A6 4860            LDR              R0, =NVIC_ISER
  707 000001A8 495E            LDR              R1, =NVIC_ISER_UART0_MASK
  708 000001AA 6001            STR              R1, [R0, #0]
  709 000001AC         
  710 000001AC         ;Init UART0 for 8N1 format at 9600 Baud,
  711 000001AC         ;and enable the rx interrupt
  712 000001AC         
  713 000001AC 4848            LDR              R0, =UART0_BASE ;set UART0 baud rate
  714 000001AE         
  715 000001AE 2101            MOVS             R1,#UART0_BDH_9600
  716 000001B0 7001            STRB             R1,[R0,#UART0_BDH_OFFSET]
  717 000001B2 2138            MOVS             R1,#UART0_BDL_9600
  718 000001B4 7041            STRB             R1,[R0,#UART0_BDL_OFFSET]
  719 000001B6         
  720 000001B6 2100            MOVS             R1,#UART0_C1_8N1 ;set UART0 8 bit serial stream 
  721 000001B8 7081            STRB             R1,[R0,#UART0_C1_OFFSET]
  722 000001BA 2100            MOVS             R1,#UART0_C3_NO_TXINV
  723 000001BC 7181            STRB             R1,[R0,#UART0_C3_OFFSET]



ARM Macro Assembler    Page 20 Exercise 11 PWM and LEDs


  724 000001BE 210F            MOVS             R1,#UART0_C4_NO_MATCH_OSR_16
  725 000001C0 7281            STRB             R1,[R0,#UART0_C4_OFFSET]
  726 000001C2 2100            MOVS             R1,#UART0_C5_NO_DMA_SSR_SYNC
  727 000001C4 72C1            STRB             R1,[R0,#UART0_C5_OFFSET]
  728 000001C6 211F            MOVS             R1,#UART0_S1_CLEAR_FLAGS
  729 000001C8 7101            STRB             R1,[R0,#UART0_S1_OFFSET]
  730 000001CA 21C0            MOVS             R1,#UART0_S2_NO_RXINV_BRK10_NO_LBKDETECT_CLEAR_FLAGS
  731 000001CC 7141            STRB             R1,[R0,#UART0_S2_OFFSET]
  732 000001CE         
  733 000001CE 210C            MOVS             R1,#UART0_C2_T_R ;Enable UART0
  734 000001D0 70C1            STRB             R1,[R0,#UART0_C2_OFFSET]
  735 000001D2         
  736 000001D2 BD07            POP              {R0-R2, PC} ;Register retention 
  737 000001D4         
  738 000001D4                 ENDP
  739 000001D4         
  740 000001D4         ;************************************************************************    
  741 000001D4         GetChar PROC             {R1-R14}
  742 000001D4         ; updated for lab 9
  743 000001D4         ; Dequeues a character from the recieve queue 
  744 000001D4         ; and returns it to R0
  745 000001D4         ; Input
  746 000001D4         ; -none-
  747 000001D4         ; Output
  748 000001D4         ; R0: Character recieved from input
  749 000001D4         
  750 000001D4 B50E            PUSH             {R1-R3, LR} ;Register retention
  751 000001D6         
  752 000001D6 4940            LDR              R1, =RxQRecord
  753 000001D8         
  754 000001D8         REPEAT_GET
  755 000001D8         
  756 000001D8         ;Mask all interrupts
  757 000001D8 B672            CPSID            I
  758 000001DA         
  759 000001DA         ;Critical code section - dequeue
  760 000001DA F7FF FFFE       BL               Dequeue
  761 000001DE         
  762 000001DE         ;Re enable interrupts
  763 000001DE B662            CPSIE            I
  764 000001E0         
  765 000001E0 D2FA            BCS              REPEAT_GET



ARM Macro Assembler    Page 21 Exercise 11 PWM and LEDs


  766 000001E2         
  767 000001E2 BD0E            POP              {R1-R3, PC} ;register retention
  768 000001E4         
  769 000001E4                 ENDP
  770 000001E4         
  771 000001E4         ;************************************************************************
  772 000001E4         PutChar PROC             {R0-R14}
  773 000001E4         ; updated for lab 9
  774 000001E4         ; Enqueues the character from R0 to transmit queue
  775 000001E4         ; Input
  776 000001E4         ; R0: Character to print to screen
  777 000001E4         ; Output
  778 000001E4         ; -none-
  779 000001E4         
  780 000001E4 B50F            PUSH             {R0-R3, LR} ;register retention 
  781 000001E6         
  782 000001E6         REPEAT_PUT
  783 000001E6         
  784 000001E6         ;Load input params to initalize queue structure
  785 000001E6 493B            LDR              R1, =TxQRecord
  786 000001E8         
  787 000001E8         ;Mask all other interrupts
  788 000001E8 B672            CPSID            I
  789 000001EA         
  790 000001EA         ;Critical section -> enqueue character
  791 000001EA         ;Enqueue character that's already in R0
  792 000001EA F7FF FFFE       BL               Enqueue
  793 000001EE         
  794 000001EE         ;Enable interrupts
  795 000001EE B662            CPSIE            I
  796 000001F0         
  797 000001F0 D2F9            BCS              REPEAT_PUT
  798 000001F2         
  799 000001F2         ;Enable UART0 Transmitter, reciever, and rx interrupt
  800 000001F2 4837            LDR              R0, =UART0_BASE
  801 000001F4 21AC            MOVS             R1,#UART0_C2_TI_RI
  802 000001F6 70C1            STRB             R1,[R0,#UART0_C2_OFFSET]
  803 000001F8         
  804 000001F8         
  805 000001F8 BD0F            POP              {R0-R3, PC} ;register retention
  806 000001FA         
  807 000001FA                 ENDP



ARM Macro Assembler    Page 22 Exercise 11 PWM and LEDs


  808 000001FA         
  809 000001FA         ;************************************************************************
  810 000001FA         GetStringSB
                               PROC             {R1-R14}
  811 000001FA         ;Prevents overrun of the buffer capacity and adds Null Termination upon 
  812 000001FA         ; pressing "Enter" key.
  813 000001FA         ;R0 = memory location to store string
  814 000001FA         ;R1 = Buffer capacity
  815 000001FA         
  816 000001FA B50F            PUSH             {R0, R1, R2, R3, LR}
  817 000001FC 2200            MOVS             R2, #0      ;Initalize string offset to zero
  818 000001FE 0003            MOVS             R3, R0      ;Save the character input   
  819 00000200         INPUT
  820 00000200         
  821 00000200 F7FF FFFE       BL               GetChar     ;use GetChar to get the next character
  822 00000204         ;in the string
  823 00000204         
  824 00000204 280D            CMP              R0, #CR     ;check for carrige return
  825 00000206 D00D            BEQ              END_GetStringSB
  826 00000208         
  827 00000208 2901            CMP              R1, #1      ;check for end of string
  828 0000020A D0F9            BEQ              INPUT
  829 0000020C         
  830 0000020C F7FF FFFE       BL               PutChar     ;use PutChar to echo to terminal
  831 00000210         
  832 00000210 5498            STRB             R0, [R3, R2] ;String[i] = input char
  833 00000212         
  834 00000212 1E49            SUBS             R1, R1, #1  ;Decrement number of characters left to read
  835 00000214         
  836 00000214 2808            CMP              R0, #BS     ;Check if backspace is typed
  837 00000216 D001            BEQ              BS_Input
  838 00000218         
  839 00000218 1C52            ADDS             R2, R2, #1  ;Add offset index for string   
  840 0000021A         
  841 0000021A E7F1            B                INPUT
  842 0000021C         
  843 0000021C         BS_Input
  844 0000021C 2A00            CMP              R2, #0
  845 0000021E D0EF            BEQ              INPUT
  846 00000220 1E52            SUBS             R2, R2, #1  ;Decrease the offset
  847 00000222 E7ED            B                INPUT
  848 00000224         



ARM Macro Assembler    Page 23 Exercise 11 PWM and LEDs


  849 00000224         END_GetStringSB
  850 00000224         
  851 00000224 2000            MOVS             R0, #0      ;null termination
  852 00000226 5498            STRB             R0, [R3, R2]
  853 00000228         
  854 00000228 BD0F            POP              {R0, R1, R2, R3, PC} ;nested subroutine
  855 0000022A         
  856 0000022A                 ENDP
  857 0000022A         ;************************************************************************
  858 0000022A         
  859 0000022A         PutStringSB
                               PROC             {R0-R14}
  860 0000022A         ;Prevents overrun of the buffer capacity, displays a null terminated string
  861 0000022A         ; to the terminal screen
  862 0000022A         ;R0 = memory location of string to print
  863 0000022A         ;R1 = Buffer capacity 
  864 0000022A         ;R2 = Address of String Buffer
  865 0000022A         
  866 0000022A B507            PUSH             {R0-R2, LR} ;register retention for nested subroutine
  867 0000022C         
  868 0000022C 2900            CMP              R1, #0      ;If all characters have been processed
  869 0000022E D009            BEQ              END_PutStringSB ;End subroutine execution
  870 00000230 1809            ADDS             R1,R1,R0
  871 00000232 0002            MOVS             R2, R0      ;save R0 to R2 
  872 00000234         READ_CHAR
  873 00000234 7810            LDRB             R0,[R2,#0]
  874 00000236 2800            CMP              R0,#NULL
  875 00000238 D004            BEQ              END_PutStringSB
  876 0000023A         
  877 0000023A F7FF FFFE       BL               PutChar     ;Echo character to the terminal
  878 0000023E         
  879 0000023E 1C52            ADDS             R2, R2, #1  ;point to next value
  880 00000240         
  881 00000240 428A            CMP              R2,R1
  882 00000242 D1F7            BNE              READ_CHAR
  883 00000244         
  884 00000244         END_PutStringSB
  885 00000244 BD07            POP              {R0-R2, PC} ;nested subroutine
  886 00000246                 ENDP
  887 00000246         
  888 00000246         ;************************************************************************ 
  889 00000246         



ARM Macro Assembler    Page 24 Exercise 11 PWM and LEDs


  890 00000246         PutNumU PROC             {R0-R14}
  891 00000246         ;Display text decimal representation of unsigned word values. 
  892 00000246         ;Continuously Divide R0 value by 10
  893 00000246         ;and print the remainder
  894 00000246         
  895 00000246 B507            PUSH             {R0, R1, R2, LR} ;register retention for nested subroutine
  896 00000248         
  897 00000248 2200            MOVS             R2, #0      ;Initalize Array offset to Zero
  898 0000024A         
  899 0000024A         DIV10
  900 0000024A         
  901 0000024A 280A            CMP              R0, #10     ;check if number is smaller than 10
  902 0000024C DB09            BLT              END_PutNumU
  903 0000024E         
  904 0000024E         ;Move dividend to R1, set divisor to 10
  905 0000024E 0001            MOVS             R1, R0
  906 00000250 200A            MOVS             R0, #10
  907 00000252         
  908 00000252         ;R1 / R0 = R0 Remainder R1
  909 00000252 F7FF FFFE       BL               DIVU
  910 00000256         
  911 00000256         ;Print remainder stored in R1
  912 00000256 B401            PUSH             {R0}
  913 00000258 4822            LDR              R0, =StringReversal
  914 0000025A         
  915 0000025A 5481            STRB             R1, [R0, R2]
  916 0000025C 1C52            ADDS             R2, R2, #1
  917 0000025E         
  918 0000025E BC01            POP              {R0}
  919 00000260         
  920 00000260         ;repeat until num is no longer divisible by 10
  921 00000260 E7F3            B                DIV10
  922 00000262         
  923 00000262         END_PutNumU
  924 00000262         
  925 00000262 3030            ADDS             R0, R0, #'0' ;Convert to ASCII Value
  926 00000264 F7FF FFFE       BL               PutChar
  927 00000268         
  928 00000268 1E52            SUBS             R2, R2, #1  ;decrement string array
  929 0000026A         
  930 0000026A         PRINT_CHAR
  931 0000026A         



ARM Macro Assembler    Page 25 Exercise 11 PWM and LEDs


  932 0000026A 481E            LDR              R0, =StringReversal ;Iterate over array and print
  933 0000026C         
  934 0000026C 2A00            CMP              R2, #0
  935 0000026E DB06            BLT              END_PUTNUM
  936 00000270         
  937 00000270 5C81            LDRB             R1, [R0, R2]
  938 00000272 0008            MOVS             R0, R1
  939 00000274         
  940 00000274 3030            ADDS             R0, R0, #'0' ;Convert to ASCII Character and Print
  941 00000276 F7FF FFFE       BL               PutChar
  942 0000027A         
  943 0000027A 1E52            SUBS             R2, R2, #1
  944 0000027C         
  945 0000027C E7F5            B                PRINT_CHAR
  946 0000027E         
  947 0000027E         END_PUTNUM
  948 0000027E BD07            POP              {R0, R1, R2, PC} ;restore previous values and get back to subroutine.
  949 00000280                 ENDP
  950 00000280         ;****************************************************************
  951 00000280         
  952 00000280         DIVU    PROC             {R2-R14}
  953 00000280         ;****************************************************************
  954 00000280         ; Performs the division operation upon R1 by dividing it from R0
  955 00000280         ; and returning the Quotient and Remainder in R0 and R1 
  956 00000280         ; respectively. If Division by 0 is top be performed, R0 and R1 
  957 00000280         ; do not change their values, instead C bit is set.
  958 00000280         ;
  959 00000280         ; R0 rem R1 = R1 / R0 
  960 00000280         ;****************************************************************
  961 00000280 B40C            PUSH             {R2-R3}     ;Temporary Registers  
  962 00000282 2800            CMP              R0, #0      ;Check for division by 0
  963 00000284 D014            BEQ              DIV_BY_0
  964 00000286 2900            CMP              R1, #0      ;Check for division of 0   
  965 00000288 D00F            BEQ              DIV_OF_0
  966 0000028A         
  967 0000028A 0002            MOVS             R2, R0      ;Temporarily storing the dividend
  968 0000028C 2000            MOVS             R0, #0      ;Initializing the quotient
  969 0000028E         
  970 0000028E 4291    While   CMP              R1,R2       ;check for Dividend >= Divisor
  971 00000290 D302            BLO              DIV_END
  972 00000292 1A89            SUBS             R1,R1,R2    ;Dividend -= Divisor
  973 00000294 1C40            ADDS             R0,R0,#1    ;Quotient++



ARM Macro Assembler    Page 26 Exercise 11 PWM and LEDs


  974 00000296 E7FA            B                While
  975 00000298         
  976 00000298 F3EF 8200 
                       DIV_END MRS              R2, APSR    ;Clear flags.
  977 0000029C 2320            MOVS             R3, #C_MASK ;Create Mask
  978 0000029E 061B            LSLS             R3,R3,#C_SHIFT ;Shift to MSB
  979 000002A0 439A            BICS             R2,R3       ;
  980 000002A2 F382 8800       MSR              APSR, R2
  981 000002A6         
  982 000002A6 BC0C    DIV_DONE
                               POP              {R2-R3}     ;Store Temporary Registers.
  983 000002A8 4770            BX               LR
  984 000002AA         
  985 000002AA 2000    DIV_OF_0
                               MOVS             R0, #0      ;Set Quotient = 0
  986 000002AC 2100            MOVS             R1, #0      ;Set Remainder = 0
  987 000002AE E7F3            B                DIV_END
  988 000002B0         
  989 000002B0 F3EF 8200 
                       DIV_BY_0
                               MRS              R2, APSR    ;Clear all flags
  990 000002B4 2320            MOVS             R3, #C_MASK ;Mask
  991 000002B6 061B            LSLS             R3,R3,#C_SHIFT
  992 000002B8 431A            ORRS             R2,R3
  993 000002BA F382 8800       MSR              APSR,R2     ;Set C Flag
  994 000002BE E7F2            B                DIV_DONE
  995 000002C0                 ENDP
  996 000002C0         ;****************************************************************
  997 000002C0         
  998 000002C0         AdvanceCursor
                               PROC             {R0-R14}
  999 000002C0         ;Echo the character with a carriage return, line feed and move the 
 1000 000002C0         ;cursor to the next line.
 1001 000002C0 B501            PUSH             {R0,LR}     ;Register retention, and nested subroutine
 1002 000002C2         ;BL       PutChar               ;Echo character
 1003 000002C2         
 1004 000002C2 200D            MOVS             R0,#CR
 1005 000002C4 F7FF FFFE       BL               PutChar
 1006 000002C8 200A            MOVS             R0,#LF
 1007 000002CA F7FF FFFE       BL               PutChar
 1008 000002CE         
 1009 000002CE BD01            POP              {R0,PC}     ;Register retention, and exiting subroutine



ARM Macro Assembler    Page 27 Exercise 11 PWM and LEDs


 1010 000002D0                 ENDP
 1011 000002D0         
 1012 000002D0         ;>>>>>   end subroutine code <<<<<
 1013 000002D0                 ALIGN
 1014 000002D0         ;****************************************************************
 1015 000002D0         ;Constants
 1016 000002D0 4006A000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              40048004 
              0C000000 
              04000000 
              40048010 
              00010005 
              40048034 
              00000400 
              40048038 
              4004A008 
              01000200 
              4004A004 
              E000E40C 
              000000C0 
              E000E280 
              00001000 
              E000E100 
              00000000 
              00000000 
              00000000 
              00000000         AREA             MyConst,DATA,READONLY
 1017 00000000         ;>>>>> begin constants here <<<<<
 1018 00000000         PWM_duty_table
 1019 00000000         PWM_duty_table_0
 1020 00000000 32 C3           DCW              PWM_DUTY_MAX ;0% bright
 1021 00000002 65 92           DCW              (75 *  PWM_DUTY_MAX / 100) ;25% bright
 1022 00000004 99 61           DCW              (50 *  PWM_DUTY_MAX / 100) ;50% bright
 1023 00000006 CC 30           DCW              (25 *  PWM_DUTY_MAX / 100) ;75% bright
 1024 00000008 00 00           DCW              0           ;100% bright
 1025 0000000A         ;>>>>>   end constants here <<<<<



ARM Macro Assembler    Page 28 Exercise 11 PWM and LEDs


 1026 0000000A 00 00           ALIGN
 1027 0000000C         ;****************************************************************
 1028 0000000C         ;Variables
 1029 0000000C                 AREA             MyData,DATA,READWRITE
 1030 00000000         ;>>>>> begin variables here <<<<<
 1031 00000000         ;Lookup table for pulse width modulation values
 1032 00000000         
 1033 00000000         
 1034 00000000         ;Queue structures from Lab 9
 1035 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    RxQBuffer
                               SPACE            Q_BUF_SZ
 1036 00000050 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 29 Exercise 11 PWM and LEDs


              00 00 00 RxQRecord
                               SPACE            Q_REC_SZ
 1037 00000062 00 00           ALIGN
 1038 00000064 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    TxQBuffer
                               SPACE            Q_BUF_SZ
 1039 000000B4 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 TxQRecord
                               SPACE            Q_REC_SZ
 1040 000000C6 00 00           ALIGN
 1041 000000C8         
 1042 000000C8         ;Queue structures from Lab 7
 1043 000000C8 00 00 00 



ARM Macro Assembler    Page 30 Exercise 11 PWM and LEDs


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    QBuffer SPACE            Q_BUF_SZ    ;Queue contents 
 1044 00000118 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 QRecord SPACE            Q_REC_SZ    ;Queue management record 
 1045 0000012A 00 00           ALIGN
 1046 0000012C         ;from lab 6 
 1047 0000012C 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 31 Exercise 11 PWM and LEDs


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       StringBuffer
                               SPACE            MAX_STRING
 1048 0000017B 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 32 Exercise 11 PWM and LEDs


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       StringReversal
                               SPACE            MAX_STRING
 1049 000001CA         ;>>>>>   end variables here <<<<<
 1050 000001CA 00 00           ALIGN
 1051 000001CC                 END
Command Line: --debug --length=49 --width=120 --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=interwork --depend=.\objects\
exercise11_asm.d -o.\objects\exercise11_asm.o -I.\RTE\_Target_1 -IC:\Users\shubh\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0
\CMSIS\Core\Include -IC:\Users\shubh\AppData\Local\Arm\Packs\Keil\Kinetis_KLxx_DFP\1.14.0\Device\Include --predefine="__
EVAL SETA 1" --predefine="__UVISION_VERSION SETA 533" --predefine="_RTE_ SETA 1" --predefine="MKL05Z32xxx4 SETA 1" --pre
define="_RTE_ SETA 1" --list=.\listings\exercise11_asm.lst Exercise11_ASM.s
